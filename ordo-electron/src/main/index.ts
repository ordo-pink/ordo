import { enforceMacOSAppLocation, is, setContentSecurityPolicy } from "electron-util"
import { app, BrowserWindow, ipcMain, nativeTheme } from "electron"
import install, { REACT_DEVELOPER_TOOLS, REDUX_DEVTOOLS } from "electron-devtools-installer"
import { join } from "path"

import { noOp } from "@client/common/utils/no-op"
import Either from "@client/common/utils/either"

import LocalSettingsStore from "@main/app/local-settings-store"
import UserSettingsStore from "@main/app/user-settings-store"

// TODO: Provide safe Electron.js APIs to avoid registerring main handlers from extensions
import createAppApi from "@main/app"
import createRevealInFilesApi from "@extensions/commands/reveal-in-files/main"

const unregisterAppApi = createAppApi(ipcMain)
const unregisterRevealInFilesApi = createRevealInFilesApi(ipcMain)

// This allows TypeScript to pick up the magic constants that's auto-generated by Forge's Webpack
// plugin that tells the Electron app where to look for the Webpack-bundled app code (depending on
// whether you're running in development or production).
declare const MAIN_WINDOW_WEBPACK_ENTRY: string
declare const MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY: string

// Handle creating/removing shortcuts on Windows when installing/uninstalling.
Either.fromBoolean(require("electron-squirrel-startup")).fold(noOp, app.quit)

let contentSecurityPolicy = `
script-src 'self' ordo-app;
img-src * data: file:;
style-src 'unsafe-inline', ordo-app data: file:;
font-src 'self', ordo-app file:;
connect-src 'self', ordo-app;
base-uri 'none';
frame-src https://www.youtube.com;
form-action 'none';
frame-ancestors 'none';
object-src 'none';
`

if (is.development) {
  contentSecurityPolicy = `img-src * data: file:; frame-src *;`
}

setContentSecurityPolicy(contentSecurityPolicy)

const iconPath = join(__dirname, "src", "assets", "icons", "icon.png")

const createWindow = async () => {
  if (is.development) {
    await install([REACT_DEVELOPER_TOOLS, REDUX_DEVTOOLS])
  }

  // Create the browser window.
  const mainWindow = new BrowserWindow({
    show: false,
    height: LocalSettingsStore.get("window.height"),
    width: LocalSettingsStore.get("window.width"),
    x: LocalSettingsStore.get("window.position.x"),
    y: LocalSettingsStore.get("window.position.y"),
    icon: iconPath,
    titleBarStyle: "hiddenInset",
    acceptFirstMouse: true,
    webPreferences: {
      sandbox: true,
      webSecurity: true,
      spellcheck: false,
      enableWebSQL: false,
      defaultEncoding: "utf-8",
      contextIsolation: true,
      nodeIntegration: false,
      nodeIntegrationInSubFrames: false,
      nodeIntegrationInWorker: false,
      allowRunningInsecureContent: false,
      accessibleTitle: "Ordo",
      preload: MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY,
    },
  })

  nativeTheme.themeSource = UserSettingsStore.get("appearance.theme")

  // const documentsPath = app.getPath("documents")
  // TODO: (join(documentsPath, "Ordo Docs"))
  // TODO: Add first launch wizard

  mainWindow.on("ready-to-show", mainWindow.show)

  // and load the index.html of the app.
  mainWindow.loadURL(MAIN_WINDOW_WEBPACK_ENTRY)

  // mainWindow.webContents.toggleDevTools()

  mainWindow.on("resized", () => saveWindowPosition(mainWindow))
  mainWindow.on("moved", () => saveWindowPosition(mainWindow))
}

const saveWindowPosition = (window: BrowserWindow) => {
  const [width, height] = window.getSize()
  const [x, y] = window.getPosition()

  LocalSettingsStore.set("window.width", width)
  LocalSettingsStore.set("window.height", height)
  LocalSettingsStore.set("window.position.x", x)
  LocalSettingsStore.set("window.position.y", y)
}

// This method will be called when Electron has finished
// initialization and is ready to create browser windows.
// Some APIs can only be used after this event occurs.
app.on("ready", () => {
  enforceMacOSAppLocation()

  createWindow()
})

app.on("before-quit", () => {
  unregisterAppApi()
  unregisterRevealInFilesApi()
})

// Quit when all windows are closed, except on macOS. There, it's common
// for applications and their menu bar to stay active until the user quits
// explicitly with Cmd + Q.
app.on("window-all-closed", () =>
  Either.fromBoolean(process.platform !== "darwin").fold(noOp, app.quit)
)

app.on("activate", () =>
  Either.fromBoolean(BrowserWindow.getAllWindows().length === 0).fold(noOp, createWindow)
)

// In this file you can include the rest of your app's specific main process
// code. You can also put them in separate files and import them here.
